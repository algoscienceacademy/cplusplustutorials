---
import Layout from '../layouts/Layout.astro';
---

<Layout title="C++ Online Editor">
  <div class="editor-page">
    <div class="background-image"></div>
    <div class="background-overlay"></div>
    
    <div class="code-editor-container backdrop-blur-xl bg-white/10 rounded-xl p-8 shadow-2xl">
      <div class="flex justify-between items-center mb-6 backdrop-blur-md bg-white/10 rounded-lg p-2">
        <h1 class="text-2xl text-white font-bold">C++ Online Editor</h1>
        <div class="editor-controls flex space-x-4">
          <button class="run-code control-button bg-green-500 hover:bg-green-600">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/>
            </svg>
            Run Code
          </button>
          <button class="reset-code control-button bg-red-500 hover:bg-red-600">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
            Reset
          </button>
        </div>
      </div>

      <div class="grid md:grid-cols-2 gap-6 h-[80vh]">
        <div class="editor-section backdrop-blur-md bg-white/10 rounded-xl p-6">
          <textarea
            class="w-full h-full bg-transparent text-gray-200 font-mono p-6 rounded-xl focus:outline-none resize-none"
            spellcheck="false"
            data-challenge-id="default"
          > {`#include <iostream>

            int main() {
                std::cout << "Hello, C++!" << std::endl;
                return 0;
            }`} </textarea>
        </div>
        
        <div class="output-section flex flex-col backdrop-blur-md bg-white/10 rounded-xl p-6">
          <div class="output-wrapper flex-grow bg-transparent rounded-xl p-6">
            <pre class="output-display text-gray-200 font-mono h-[calc(100%-80px)] overflow-auto"></pre>
            <div class="input-section mt-4 backdrop-blur-md bg-white/10 rounded-lg p-2">
              <div class="flex items-center space-x-4">
                <input 
                  type="text" 
                  class="input-field flex-grow bg-transparent text-gray-200 font-mono p-3 rounded-lg border border-white/10 focus:outline-none focus:border-white/30"
                  placeholder="Enter input here..."
                />
                <button class="send-input control-button bg-blue-500 hover:bg-blue-600">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .editor-page {
    @apply min-h-screen w-full p-4 relative overflow-hidden;
  }

  .background-image {
    @apply fixed inset-0 z-0;
    background-image: url('/programming3.jpg');
    background-size: cover;
    background-position: center;
    animation: backgroundAnimation 20s infinite alternate;
  }

  @keyframes backgroundAnimation {
    0% { transform: scale(1); }
    100% { transform: scale(1.1); }
  }

  .background-overlay {
    @apply fixed inset-0 z-0;
    background: rgba(15, 23, 42, 0.8);
  }

  .code-editor-container {
    @apply relative z-10 max-w-[95vw] mx-auto mt-4;
  }

  .control-button {
    @apply flex items-center px-4 py-2 text-white rounded-lg transition-all duration-300 active:scale-95 focus:outline-none;
  }

  textarea, .output-display {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }

  textarea::-webkit-scrollbar,
  .output-display::-webkit-scrollbar {
    width: 8px;
  }

  textarea::-webkit-scrollbar-track,
  .output-display::-webkit-scrollbar-track {
    background: transparent;
  }

  textarea::-webkit-scrollbar-thumb,
  .output-display::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
  }

  textarea {
    font-size: 14px;
    line-height: 1.5;
    caret-color: #00ff00;
  }

  .output-display {
    font-size: 14px;
    line-height: 1.5;
  }

  .input-field {
    font-size: 14px;
    line-height: 1.5;
  }

  .editor-section, .output-section {
    border: 1px solid #333;
    border-radius: 8px;
  }

  .editor-section {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .output-section {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .output-wrapper {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .input-section {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }
</style>

<script>
  class CodeEditor {
    constructor(container) {
      this.container = container;
      this.textarea = container.querySelector('textarea');
      this.inputField = container.querySelector('.input-field');
      this.output = container.querySelector('.output-display');
      this.runButton = container.querySelector('.run-code');
      this.resetButton = container.querySelector('.reset-code');
      this.sendInputButton = container.querySelector('.send-input');
      this.initialCode = this.textarea.value;
      
      this.initializeEventListeners();
    }
    
    initializeEventListeners() {
      this.runButton?.addEventListener('click', () => this.runCode());
      this.resetButton?.addEventListener('click', () => this.resetCode());
      this.sendInputButton?.addEventListener('click', () => this.sendInput());
    }
    
    async runCode() {
      try {
        this.output.textContent = "Compiling and running...";
        const code = this.textarea.value;
        const input = this.inputField.value;

        const response = await fetch('https://emkc.org/api/v2/piston/execute', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            language: 'cpp',
            version: '10.2.0',
            files: [{ content: code }],
            stdin: input,
            compile_timeout: 10000,
            run_timeout: 3000,
            compile_memory_limit: -1,
            run_memory_limit: -1,
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        if (result.run.stderr) {
          this.output.textContent = `Error:\n${result.run.stderr}`;
        } else {
          this.output.textContent = `Output:\n${result.run.stdout}`;
        }
      } catch (error) {
        this.output.textContent = `Error: ${error.message}`;
        console.error('Error:', error);
      }
    }
    
    sendInput() {
      if (this.inputField.value.trim() === '') {
        this.output.textContent = 'Error: Input cannot be empty.';
        return;
      }
      this.runCode();
    }
    
    resetCode() {
      this.textarea.value = this.initialCode;
      this.output.textContent = '';
      this.inputField.value = '';
    }
  }
  
  // Initialize editor
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.code-editor-container');
    if (container) new CodeEditor(container);
  });
</script>