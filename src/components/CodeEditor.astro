---
interface Props {
  initialCode: string;
  language?: string;
  challengeId?: string;
}

const { initialCode, language = 'cpp', challengeId } = Astro.props;
---

<div class="code-editor-container backdrop-blur-xl bg-glass/20 rounded-xl p-6 shadow-xl transition-all duration-300 hover:shadow-2xl hover:scale-[1.02]">
  <div class="flex justify-between items-center mb-6">
    <div class="editor-controls flex space-x-4">
      <button class="run-code control-button bg-gradient-to-r from-emerald-500 to-green-600">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"/>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        Run Code
      </button>
      <button class="reset-code control-button bg-gradient-to-r from-gray-600 to-gray-700">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        Reset
      </button>
      {challengeId && (
        <button class="save-code control-button bg-gradient-to-r from-blue-500 to-blue-600">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
          </svg>
          Save Progress
        </button>
      )}
    </div>
  </div>
  
  <div class="grid md:grid-cols-2 gap-6">
    <div class="editor-section group">
      <div class="editor-header flex items-center mb-2 text-gray-400">
        <div class="flex space-x-2 mr-4">
          <span class="w-3 h-3 rounded-full bg-red-500"></span>
          <span class="w-3 h-3 rounded-full bg-yellow-500"></span>
          <span class="w-3 h-3 rounded-full bg-green-500"></span>
        </div>
        <span class="text-sm font-mono">main.cpp</span>
      </div>
      <div class="editor-wrapper backdrop-blur-lg bg-[#1f2937]/90 rounded-xl p-4 shadow-inner transition-all duration-300 group-hover:shadow-lg group-hover:shadow-teal-500/10">
        <textarea
          class="w-full h-80 bg-transparent text-gray-300 font-mono p-4 focus:outline-none resize-none"
          spellcheck="false"
          data-challenge-id={challengeId}
        >{initialCode}</textarea>
      </div>
    </div>
    
    <div class="output-section group">
      <div class="output-header flex items-center justify-between mb-2">
        <span class="text-white font-semibold">Output</span>
        <div class="flex items-center space-x-2">
          <div class="h-2 w-2 bg-green-500 rounded-full animate-pulse"></div>
          <span class="text-gray-400 text-sm">Ready</span>
        </div>
      </div>
      <div class="output-wrapper backdrop-blur-lg bg-[#1f2937]/90 rounded-xl p-4 shadow-inner transition-all duration-300 group-hover:shadow-lg group-hover:shadow-blue-500/10">
        <pre class="output-display h-64 text-gray-300 font-mono p-4 overflow-auto"></pre>
        <div class="input-section mt-4">
          <div class="flex items-center space-x-4">
            <input 
              type="text" 
              class="input-field flex-grow bg-black/30 text-gray-300 font-mono p-3 rounded-lg border border-gray-700 focus:outline-none focus:border-blue-500 transition-all"
              placeholder="Enter input here..."
            />
            <button class="send-input control-button bg-gradient-to-r from-blue-500 to-blue-600">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .bg-glass {
    background: rgba(255, 255, 255, 0.05);
  }

  .control-button {
    @apply flex items-center px-4 py-2 text-white rounded-lg 
           transition-all duration-300 shadow-lg
           hover:shadow-xl hover:scale-105 hover:brightness-110
           active:scale-95 focus:outline-none;
  }

  textarea {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }

  textarea::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  textarea::-webkit-scrollbar-track {
    background: transparent;
  }

  textarea::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
  }

  textarea::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .output-display {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }

  .output-display::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  .output-display::-webkit-scrollbar-track {
    background: transparent;
  }

  .output-display::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
  }

  .output-display::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  @keyframes glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
    }
    50% {
      box-shadow: 0 0 40px rgba(0, 255, 255, 0.4);
    }
  }
</style>

<script>
  class CodeEditor {
    constructor(container) {
      this.container = container;
      this.textarea = container.querySelector('textarea');
      this.inputField = container.querySelector('.input-field');
      this.output = container.querySelector('.output-display');
      this.runButton = container.querySelector('.run-code');
      this.resetButton = container.querySelector('.reset-code');
      this.saveButton = container.querySelector('.save-code');
      this.sendInputButton = container.querySelector('.send-input');
      this.initialCode = this.textarea.value;
      this.challengeId = this.textarea.dataset.challengeId;
      this.stdin = '';
      this.isWaitingForInput = false;
      
      this.initializeEventListeners();
      this.loadSavedCode();
    }
    
    initializeEventListeners() {
      this.runButton.addEventListener('click', () => this.runCode());
      this.resetButton.addEventListener('click', () => this.resetCode());
      this.sendInputButton.addEventListener('click', () => this.sendInput());
      if (this.saveButton) {
        this.saveButton.addEventListener('click', () => this.saveCode());
      }

      // Add auto-save on typing
      let timeout;
      this.textarea.addEventListener('input', () => {
        clearTimeout(timeout);
        timeout = setTimeout(() => this.saveCode(), 1000);
      });
    }

    loadSavedCode() {
      if (this.challengeId) {
        const savedCode = localStorage.getItem(`cpp_challenge_${this.challengeId}`);
        if (savedCode) {
          this.textarea.value = savedCode;
        }
      }
    }
    
    saveCode() {
      if (this.challengeId) {
        localStorage.setItem(`cpp_challenge_${this.challengeId}`, this.textarea.value);
        this.showSaveNotification();
      }
    }

    showSaveNotification() {
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg';
      notification.textContent = 'Progress saved!';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 2000);
    }
    
    async runCode() {
      try {
        this.output.textContent = "Compiling...\n";
        const code = this.textarea.value;
        const input = this.inputField.value;

        const response = await fetch('https://emkc.org/api/v2/piston/execute', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            language: 'cpp',
            version: '*',
            files: [
              {
                name: 'main.cpp',
                content: code,
              },
            ],
            stdin: input,
            args: [],
            compile_timeout: 10000,
            run_timeout: 3000,
            compile_memory_limit: -1,
            run_memory_limit: -1,
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        if (result.run.stderr) {
          this.output.textContent = `Error: ${result.run.stderr}`;
        } else {
          this.output.textContent = `Output:\n${result.run.stdout}`;
        }
      } catch (error) {
        this.output.textContent = `Error: ${error.message}`;
        console.error('Error:', error);
      }
    }
    
    sendInput() {
      const input = this.inputField.value;
      if (input.trim() === '') {
        this.output.textContent = 'Error: Input cannot be empty.';
        return;
      }
      this.stdin = input;
      this.runCode();
    }
    
    resetCode() {
      this.textarea.value = this.initialCode;
      this.output.textContent = '';
      this.inputField.value = '';
      this.stdin = '';
      if (this.challengeId) {
        localStorage.removeItem(`cpp_challenge_${this.challengeId}`);
      }
    }
  }
  
  // Initialize all code editors on the page
  document.querySelectorAll('.code-editor-container').forEach(container => {
    new CodeEditor(container);
  });
</script>